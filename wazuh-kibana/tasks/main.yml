---
- name: allow kibana web traffic 5601/tcp
  firewalld:
    port: 5601/tcp
    permanent: yes
    immediate: yes
    zone: public
    state: enabled

- name: Create local temporary directory for certificates generation
  file:
    path: "{{ local_certs_path }}/certs"
    mode: 0700
    state: directory
  
- name: Check if http.pem
  stat:
    path: "{{ local_certs_path }}/certs/{{ kibana_node_name }}_http.pem"
  register: http_pem

- name: Check if http.key exists
  stat:
    path: "{{ local_certs_path }}/certs/{{ kibana_node_name }}_http.key"
  register: http_key

- name: Generate temporary key
  command: >-
    openssl genrsa -out {{ local_certs_path }}/certs/{{ item }}-key-temp.pem 2048
  when:
    - not http_key.stat.exists
  with_items:
    - "{{ kibana_node_name }}_http"

- name: Generate key in correct format
  command: >-
    openssl pkcs8 -inform PEM -outform PEM
    -in {{ local_certs_path }}/certs/{{ item }}-key-temp.pem
    -topk8
    -nocrypt
    -v1 PBE-SHA1-3DES
    -out {{ local_certs_path }}/certs/{{ item }}.key
  with_items:
    - "{{ kibana_node_name }}_http"
  when:
    - not http_key.stat.exists

- name: Generate the csr
  command: >-
    openssl req -new
    -key {{ local_certs_path }}/certs/{{ item }}.key
    -out {{ local_certs_path }}/certs/{{ item }}.csr
    -subj "/CN={{ item }}/OU=Ops/O={{ domain_name }}\, Inc./DC={{ domain_name }}"
  with_items:
    - "{{ kibana_node_name }}_http"
  when:
    - not http_pem.stat.exists

- name: Generate pem
  command: >-
    openssl x509 -req
    -in {{ local_certs_path }}/certs/{{ item }}.csr
    -CA {{ local_certs_path }}/certs/root-ca.pem
    -CAkey {{ local_certs_path }}/certs/root-ca.key
    -CAcreateserial -sha256
    -out {{ local_certs_path }}/certs/{{ item }}.pem
    -days 365
  with_items:
    - "{{ kibana_node_name }}_http"
  when:
    - not http_pem.stat.exists

- name: RedHat/CentOS/Fedora | Add OpenDistro repo
  yum_repository:
    file: opendistro
    name: opendistro_repo
    description: Opendistro yum repository
    baseurl: "{{ package_repos.yum.opendistro.baseurl }}"
    gpgkey: "{{ package_repos.yum.opendistro.gpg }}"
    gpgcheck: true

- name: Install Kibana
  package:
    name: "opendistroforelasticsearch-kibana-{{ kibana_opendistro_version }}"
    state: present
  register: install

- name: Debug before main run
  ansible.builtin.debug:
    var: install
    verbosity: 2

- name: Debug after main run
  ansible.builtin.debug:
    var: install
    verbosity: 2
  
- name: Remove Kibana configuration file
  file:
    # noqa 503
    path: "{{ kibana_conf_path }}/kibana.yml"
    state: absent
  when: install.changed
  tags: install

- name: Copy the certificates from local to the Kibana instance
  copy:
    src: "{{ local_certs_path }}/certs/{{ item }}"
    dest: /usr/share/kibana
    mode: 0644
  with_items:
    - "root-ca.pem"
    - "{{ kibana_node_name }}_http.key"
    - "{{ kibana_node_name }}_http.pem"
  tags:
    - security
  when: install.changed

- name: Copy Configuration File
  blockinfile:
    block: "{{ lookup('template', 'opendistro_kibana.yml.j2') }}"
    dest: "{{ kibana_conf_path }}/kibana.yml"
    create: true
    group: kibana
    owner: kibana
    mode: 0640
    marker: "## {mark} Kibana general settings ##"
  notify: restart kibana
  tags:
    - install
    - configure

- name: Ensuring Kibana directory owner
  file:
    # noqa 208
    path: "/usr/share/kibana"
    state: directory
    owner: kibana
    group: kibana
    recurse: yes

- name: Install Wazuh Plugin (can take a while)
  shell: >-
    NODE_OPTIONS="{{ node_options }}" /usr/share/kibana/bin/kibana-plugin install
    {{ wazuh_app_url }}-{{ wazuh_version }}_{{ elastic_stack_version }}-1.zip
  args:
    executable: /bin/bash
    creates: /usr/share/kibana/plugins/wazuh/package.json
    chdir: /usr/share/kibana
  become: yes
  become_user: kibana
  notify: restart kibana
  tags:
    - install
    - skip_ansible_lint
  when:
    - not build_from_sources

- name: Kibana optimization (can take a while)
  shell: /usr/share/kibana/node/bin/node {{ node_options }} /usr/share/kibana/src/cli/cli.js --optimize -c {{ kibana_conf_path }}/kibana.yml
  args:
    executable: /bin/bash
  become: yes
  become_user: kibana
  changed_when: false
  tags:
    - skip_ansible_lint

- name: Wait for Elasticsearch port
  wait_for: host={{ elasticsearch_network_host }} port={{ elasticsearch_http_port }}

- name: Select correct API protocol
  set_fact:
    elastic_api_protocol: "{% if kibana_opendistro_security is defined and kibana_opendistro_security %}https{% else %}http{% endif %}"

- name: Attempting to delete legacy Wazuh index if exists
  uri:
    url: "{{ elastic_api_protocol }}://{{ elasticsearch_network_host }}:{{ elasticsearch_http_port }}/.wazuh"
    method: DELETE
    user: "admin"
    password: "{{ opendistro_admin_password }}"
    validate_certs: no
    status_code: 200, 404

- name: Create wazuh plugin config directory
  file:
    path: /usr/share/kibana/data/wazuh/config/
    state: directory
    recurse: yes
    owner: kibana
    group: kibana
    mode: 0751
  changed_when: False

- name: Configure Wazuh Kibana Plugin
  template:
    src: wazuh.yml.j2
    dest: /usr/share/kibana/data/wazuh/config/wazuh.yml
    owner: kibana
    group: kibana
    mode: 0751
  changed_when: False

- name: Ensure Kibana started and enabled
  service:
    name: kibana
    enabled: true
    state: started
